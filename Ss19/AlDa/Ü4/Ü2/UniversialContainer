import copy

class UniversalContainer:
    def __init__(self):
        self.capacity_ = 1
        # constructor for empty container
        # we reserve memory for at least one item
        self.data_ = [None]*self.capacity_ # the internal memory
        self.size_ = 0
        # no item has been inserted yet
    def size(self):
        return self.size_
    def capacity(self):
        return self.capacity_
    def push(self, item):
    # add item at the end
        if self.capacity_ == self.size_: # internal memory is full
            olddata=self.data_
            self.data_=olddata*(self.capacity_*2)
            self.capacity_*=2
        self.data_[self.size_] = item
        self.size_ += 1
    def popFirst(self):
        if self.size_ == 0:
            raise RuntimeError("popFirst() on empty container")
        out=self.data_[0]
        for x in range(self.size_-1):
            self.data_[x]=self.data_[x+1]
        self.size_-=1
        return out
    def popLast(self):
        if self.size_ == 0:
            raise RuntimeError("popLast() on empty container")
        out=self.data_[self.size_-1]
        self.size_-=1
    def __getitem__(self, index):# __getitem__ implements v = c[index]
        if index < 0 or index >= self.size_:
            raise RuntimeError('index out of range')
        return self.data_[index]
    def __setitem__(self, index, v): # __setitem__ implements c[index] = v
        if index < 0 or index >= self.size_:
            raise RuntimeError("index out of range")
        self.data_[index]=v
    def first(self):
        return self.data_[0]
    def last(self):
        return self.data_[self.size_-1]

def testContainer():
    c=UniversalContainer()

    assert c.size() == 0
    assert c.size() <= c.capacity()
    c.push(0)
    assert c.first()==0
    oldsize=c.size()
    c.push(1)
    assert c.size()==oldsize+1
    assert c.last()==1
    assert c.first()==0
    c2=copy.deepcopy(c)
    c.push(2)
    c.popLast()
    assert c[0]==c2[0] and c[1]==c2[1]
    oldsize=c.size()
    c[1]=3
    assert c.size()==oldsize
    assert c[1]==3
    assert c[0]==0
    oldsize=c.size()
    c.popLast()
    assert c.size()==oldsize-1
    assert c[0]==0
    c.push(1)
    oldsize=c.size()
    c.popFirst()
    assert c.size()==oldsize-1
    assert c[0]==1
    assert c.first() == c[0]
    assert c.last() == c[c.size()-1]

testContainer()
